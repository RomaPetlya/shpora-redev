import React from "react";

export const ComponentsComponent = () => {
    return (
        <>
            <h2>About components</h2>
            <h3>Components</h3>
            <p>
            <span className="highlight">"Компоненты"</span> - это небольшие, переиспользуемые элементы
                пользовательского интерфейса, которые объединены вместе, чтобы
                создать более крупные приложения. Компоненты позволяют разбить
                интерфейс на независимые части, про которые легко думать в
                отдельности.
            </p>
            <p>
                Во многом компоненты ведут себя как обычные функции JavaScript.
                Они принимают произвольные входные данные (так называемые
                «пропсы») и возвращают React-элементы, описывающие, что мы хотим
                увидеть на экране.{" "}
            </p>
            <p>React компоненты могут быть классовыми или функциональными. </p>
            <details open>
                <summary>
                    <span>
                        Пример объявления классового компонента в React:
                    </span>
                </summary>
                <pre>
                    {`
        class MyComponent extends React.Component {
            render() {
                return <div>Hello, Redev!</div>;
            }
        }
        export default MyComponent;
        `}
                </pre>
            </details>
            <details open>
                <summary>
                    <span>
                        Пример объявления функционального компонента в React:
                    </span>
                </summary>
                <pre>
                    {`
        const MyComponent = () => {
            return <div>Hello, Redev!</div>;
            }
        export default MyComponent;
        `}
                </pre>
            </details>
            <p>
                Оба примера создают компонент, который отображает текст "Hello,
                Redev!". Разница заключается в том, что классовый компонент
                наследуется от базового класса <span className="highlight">React.Component</span> и имеет доступ к
                дополнительным функциям, таким как состояние и методы жизненного
                цикла.
            </p>
            <ol className="list">
                <p className="list-text">
                    Компонента должна себя вести как чистая функция. "Чистой"
                    называется функция, которая:
                </p>
                <li className="list-item">
                    Для одинаковых входных данных всегда возвращает один
                    результат.
                </li>
                <li className="list-item">
                    Не имеет побочных эффектов (то есть не изменяет внешние
                    состояния).
                </li>
                <li className="list-item">Не зависит от внешних состояний.</li>
            </ol>
            <h3>Stateless VS Stateful</h3>
            <h4>Stateless компоненты </h4>
            <p>
                Они просто принимают props и возвращают JSX, который описывает,
                как должен выглядеть UI. Эти компоненты не имеют внутреннего
                состояния и не могут изменять свое поведение в зависимости от
                событий или действий пользователя.
            </p>
            <h4>Stateful компоненты</h4>
            <p>
                Stateful компоненты могут управлять состоянием и изменять
                свое поведение в зависимости от событий. Они используют
                внутреннее состояние, чтобы отслеживать изменения и обновлять UI
                в ответ на действия пользователя или другие события. С
                появлением хуков в React 16.8 функциональные компоненты могут
                также управлять состоянием и эффектами. Теперь можно создавать
                stateful функциональные компоненты с помощью хуков
                <span className="highlight">useState</span> и <span className="highlight">useEffect</span>.
            </p>
        </>
    );
};
