import React from "react";

export const VirtualDomComponent = () => {
    return (
        <>
            <h2>Введение в VirtualDOM</h2>
            <h3>Что такое DOM? </h3>
            <p>
                DOM - это сокращение от <span className="highlight">"Document Object Model"</span> (объектная
                модель документа).
            </p>
            <p>
                вместо того, чтобы непосредственно вносить изменения в реальный
                DOM, React использует виртуальный DOM. Виртуальный DOM - это
                промежуточное представление DOM в памяти компьютера. React
                создает виртуальное дерево элементов, которое точно
                соответствует текущему состоянию компонентов. Затем React
                сравнивает это виртуальное дерево с реальным DOM и
                определяет, какие изменения необходимо внести.
            </p>
            <ol className="list">
                <p className="list-text">Почему это важно:</p>
                <li className="list-item">
                    Эффективность: Виртуальный DOM позволяет React
                    оптимизировать обновление DOM. React находит минимальный
                    набор изменений, которые необходимо внести, и применяет их к
                    реальному DOM. Это снижает нагрузку на браузер и улучшает
                    производительность приложения.
                </li>
                <li className="list-item">
                    Удобство программирования: Работа с виртуальным DOM упрощает
                    разработку. Не нужно думать о том, как React будет обновлять
                    реальный DOM. React самостоятельно заботится об эффективных
                    изменениях.
                </li>
                <li className="list-item">
                    Переносимость: Виртуальный DOM абстрагирует тебя от различий
                    в реализации DOM в разных браузерах. Можно не думать о том,
                    какой браузер будет его запускать. React самостоятельно
                    обрабатывает эти различия.
                </li>
            </ol>
            <h3>Reconciliation</h3>
            <p>
                Reconciliation - это процесс, при котором React сравнивает
                предыдущее состояние компонента с новым состоянием и определяет,
                какие изменения нужно внести в пользовательский интерфейс.
            </p>
            <ol className="list">
                <p className="list-text">Reconciliation происходит по следующему сценарию:</p>
                <li className="list-item">
                    Обновление состояния: Когда состояние компонента изменяется,
                    React запускает процесс reconciliation. Он сравнивает
                    предыдущее состояние компонента с новым состоянием, чтобы
                    определить, какие части интерфейса нужно обновить.
                </li>
                <li className="list-item">
                    Сравнение элементов: React сравнивает элементы, которые
                    представляют компоненты, и их дочерние элементы. Он
                    анализирует их типы, свойства и ключи, чтобы понять, какие
                    элементы нужно обновить, добавить или удалить.
                </li>
                <li className="list-item">
                    Обновление виртуального DOM: React использует виртуальный
                    DOM (Virtual DOM), который является внутренним
                    представлением интерфейса. Он создает новое виртуальное
                    дерево элементов на основе изменений состояния компонента.
                </li>
                <li className="list-item">
                    Эффективные обновления: React делает эффективные обновления,
                    минимизируя количество фактических изменений в реальном DOM.
                    Он определяет, какие элементы действительно нужно обновить,
                    и применяет только эти изменения в реальном DOM, чтобы
                    избежать ненужных операций.
                </li>
            </ol>
        </>
    );
};
